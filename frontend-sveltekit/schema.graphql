schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Course {
  id: ID!
  title: String!
}

input CourseFilterId {
  eq: ID
  greaterThan: ID
  greaterThanOrEqual: ID
  in: [ID!]
  isNil: Boolean
  lessThan: ID
  lessThanOrEqual: ID
  notEq: ID
}

input CourseFilterInput {
  and: [CourseFilterInput!]
  id: CourseFilterId
  or: [CourseFilterInput!]
  title: CourseFilterTitle
}

input CourseFilterTitle {
  eq: String
  greaterThan: String
  greaterThanOrEqual: String
  in: [String!]
  isNil: Boolean
  lessThan: String
  lessThanOrEqual: String
  notEq: String
}

enum CourseSortField {
  ID
  TITLE
}

input CourseSortInput {
  field: CourseSortField!
  order: SortOrder = ASC
}

input CreateCourseInput {
  title: String!
}

"""The result of the :create_course mutation"""
type CreateCourseResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The successful result of the mutation"""
  result: Course
}

"""The result of the :destroy_course mutation"""
type DestroyCourseResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The record that was successfully deleted"""
  result: Course
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

"""An error generated by a failed mutation"""
type MutationError {
  """An error code for the given error"""
  code: String

  """The field or fields that produced the error"""
  fields: [String]

  """The human readable error message"""
  message: String

  """A shorter error message, with vars not replaced"""
  shortMessage: String

  """Replacements for the short message"""
  vars: Json
}

type RootMutationType {
  createCourse(input: CreateCourseInput): CreateCourseResult
  destroyCourse(id: ID): DestroyCourseResult
  updateCourse(id: ID, input: UpdateCourseInput): UpdateCourseResult
}

type RootQueryType {
  getCourse(
    """The id of the record"""
    id: ID!
  ): Course
  listCourses(
    """A filter to limit the results"""
    filter: CourseFilterInput

    """How to sort the records in the response"""
    sort: [CourseSortInput]
  ): [Course!]!
}

enum SortOrder {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

input UpdateCourseInput {
  title: String
}

"""The result of the :update_course mutation"""
type UpdateCourseResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The successful result of the mutation"""
  result: Course
}
